{"version":3,"sources":["../src/stream-utils/JSONTransformStreams.tsx"],"names":[],"mappings":";AAAO,IAAM,mBAAN,cAAkC,gBAAkC;AAAA,EACzE,cAAc;AACZ,UAAM;AAAA,MACJ,UAAU,OAAO,YAAY;AAC3B,mBAAW,QAAQ,KAAK,UAAU,KAAK,CAAC;AAAA,MAC1C;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEO,IAAM,mBAAN,cAAkC,gBAGvC;AAAA,EACA,cAAc;AACZ,UAAM;AAAA,MACJ,UAAU,OAAO,YAAY;AAC3B,YAAI,OAAO,UAAU,UAAU;AAC7B,kBAAQ,IAAI,YAAY,EAAE,OAAO,KAAK;AAAA,QACxC;AACA,mBAAW,QAAQ,KAAK,MAAM,KAAK,CAAC;AAAA,MACtC;AAAA,IACF,CAAC;AAAA,EACH;AACF","sourcesContent":["export class JSONEncodeStream<T> extends TransformStream<T, JsonString<T>> {\n  constructor() {\n    super({\n      transform(chunk, controller) {\n        controller.enqueue(JSON.stringify(chunk));\n      },\n    });\n  }\n}\n\nexport class JSONDecodeStream<T> extends TransformStream<\n  JsonString<T> | AllowSharedBufferSource,\n  T\n> {\n  constructor() {\n    super({\n      transform(chunk, controller) {\n        if (typeof chunk !== \"string\") {\n          chunk = new TextDecoder().decode(chunk);\n        }\n        controller.enqueue(JSON.parse(chunk));\n      },\n    });\n  }\n}\n\nexport type JsonString<Encoded> = string & { __jsonString?: [Encoded] };\n"]}